from enum import Enum, auto
from mechs._internal import *
from mechs._internal.mirrors import *

class WorldInfo(BukkitWrapper):
    @binding_constructor("org.bukkit.generator.WorldInfo")
    def __init__(self, delegate: BukkitType):
        self._delegate = delegate

    u_i_d = TransformedROProp[UUID]("getUID", java_uuid_to_python)
    min_height = ROProp[int]("getMinHeight")
    seed = ROProp[int]("getSeed")
    # TODO: property environment getEnvironment null
    max_height = ROProp[int]("getMaxHeight")
    # TODO: property name getName null
    # TODO: method public abstract org.bukkit.generator.BiomeProvider org.bukkit.generator.WorldInfo.vanillaBiomeProvider()

class RegionAccessor(Keyed):
    @binding_constructor("org.bukkit.RegionAccessor")
    def __init__(self, delegate: BukkitType):
        self._delegate = delegate

    # TODO: property living_entities getLivingEntities null
    # TODO: property moon_phase getMoonPhase null
    # TODO: property entities getEntities null
    # TODO: method public abstract java.util.Collection<org.bukkit.entity.Entity> org.bukkit.RegionAccessor.getEntitiesByClasses(java.lang.Class<?>...)
    # TODO: method public default <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.spawn(org.bukkit.Location,java.lang.Class<T>,org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason) throws java.lang.IllegalArgumentException
    # TODO: method public abstract <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.spawn(org.bukkit.Location,java.lang.Class<T>) throws java.lang.IllegalArgumentException
    # TODO: method public abstract <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.spawn(org.bukkit.Location,java.lang.Class<T>,java.util.function.Consumer<? super T>,org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason) throws java.lang.IllegalArgumentException
    # TODO: method public default <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.spawn(org.bukkit.Location,java.lang.Class<T>,org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason,java.util.function.Consumer<? super T>) throws java.lang.IllegalArgumentException
    # TODO: method public default <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.spawn(org.bukkit.Location,java.lang.Class<T>,java.util.function.Consumer<? super T>) throws java.lang.IllegalArgumentException
    # TODO: method public abstract <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.spawn(org.bukkit.Location,java.lang.Class<T>,boolean,java.util.function.Consumer<? super T>) throws java.lang.IllegalArgumentException
    # TODO: method public abstract <T extends org.bukkit.entity.Entity> java.util.Collection<T> org.bukkit.RegionAccessor.getEntitiesByClass(java.lang.Class<T>)
    # TODO: method public abstract <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.addEntity(T)
    # TODO: method public abstract org.bukkit.Material org.bukkit.RegionAccessor.getType(org.bukkit.Location)
    # TODO: method public abstract org.bukkit.Material org.bukkit.RegionAccessor.getType(int,int,int)
    # TODO: method public abstract org.bukkit.block.BlockState org.bukkit.RegionAccessor.getBlockState(org.bukkit.Location)
    # TODO: method public abstract org.bukkit.block.BlockState org.bukkit.RegionAccessor.getBlockState(int,int,int)
    # TODO: method public abstract io.papermc.paper.block.fluid.FluidData org.bukkit.RegionAccessor.getFluidData(int,int,int)
    # TODO: method public default io.papermc.paper.block.fluid.FluidData org.bukkit.RegionAccessor.getFluidData(org.bukkit.Location)
    # TODO: method public default io.papermc.paper.block.fluid.FluidData org.bukkit.RegionAccessor.getFluidData(io.papermc.paper.math.Position)
    # TODO: method public abstract void org.bukkit.RegionAccessor.setBlockData(org.bukkit.Location,org.bukkit.block.data.BlockData)
    # TODO: method public abstract void org.bukkit.RegionAccessor.setBlockData(int,int,int,org.bukkit.block.data.BlockData)
    # TODO: method public abstract void org.bukkit.RegionAccessor.setType(org.bukkit.Location,org.bukkit.Material)
    # TODO: method public abstract void org.bukkit.RegionAccessor.setType(int,int,int,org.bukkit.Material)
    # TODO: method public abstract org.bukkit.block.Biome org.bukkit.RegionAccessor.getComputedBiome(int,int,int)
    # TODO: method public abstract <T extends org.bukkit.entity.Entity> T org.bukkit.RegionAccessor.createEntity(org.bukkit.Location,java.lang.Class<T>)
    # TODO: method public abstract int org.bukkit.RegionAccessor.getHighestBlockYAt(int,int)
    # TODO: method public abstract int org.bukkit.RegionAccessor.getHighestBlockYAt(org.bukkit.Location,org.bukkit.HeightMap)
    # TODO: method public abstract int org.bukkit.RegionAccessor.getHighestBlockYAt(org.bukkit.Location)
    # TODO: method public abstract int org.bukkit.RegionAccessor.getHighestBlockYAt(int,int,org.bukkit.HeightMap)
    # TODO: method public abstract org.bukkit.entity.Entity org.bukkit.RegionAccessor.spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType,boolean)
    # TODO: method public abstract org.bukkit.entity.Entity org.bukkit.RegionAccessor.spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType)
    # TODO: method public default org.bukkit.entity.Entity org.bukkit.RegionAccessor.spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType,org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason)
    # TODO: method public default org.bukkit.entity.Entity org.bukkit.RegionAccessor.spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType,org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason,java.util.function.Consumer<? super org.bukkit.entity.Entity>)
    # TODO: method public abstract org.bukkit.block.Biome org.bukkit.RegionAccessor.getBiome(int,int,int)
    # TODO: method public abstract org.bukkit.block.Biome org.bukkit.RegionAccessor.getBiome(org.bukkit.Location)
    # TODO: method public abstract void org.bukkit.RegionAccessor.setBiome(int,int,int,org.bukkit.block.Biome)
    # TODO: method public abstract void org.bukkit.RegionAccessor.setBiome(org.bukkit.Location,org.bukkit.block.Biome)
    # TODO: method public abstract boolean org.bukkit.RegionAccessor.generateTree(org.bukkit.Location,java.util.Random,org.bukkit.TreeType,java.util.function.Predicate<? super org.bukkit.block.BlockState>)
    # TODO: method public abstract boolean org.bukkit.RegionAccessor.generateTree(org.bukkit.Location,java.util.Random,org.bukkit.TreeType,java.util.function.Consumer<? super org.bukkit.block.BlockState>)
    # TODO: method public abstract boolean org.bukkit.RegionAccessor.generateTree(org.bukkit.Location,java.util.Random,org.bukkit.TreeType)
    # TODO: method public abstract org.bukkit.block.data.BlockData org.bukkit.RegionAccessor.getBlockData(org.bukkit.Location)
    # TODO: method public abstract org.bukkit.block.data.BlockData org.bukkit.RegionAccessor.getBlockData(int,int,int)
    # TODO: method public abstract boolean org.bukkit.RegionAccessor.hasCollisionsIn(org.bukkit.util.BoundingBox)
    # TODO: method public abstract boolean org.bukkit.RegionAccessor.lineOfSightExists(org.bukkit.Location,org.bukkit.Location)

class World(RegionAccessor, WorldInfo, PluginMessageRecipient, Metadatable, PersistentDataHolder, Keyed, ForwardingAudience):
    @binding_constructor("org.bukkit.World")
    def __init__(self, delegate: BukkitType):
        self._delegate = delegate

    allow_animals = ROProp[bool]("getAllowAnimals")
    # TODO: property biome_provider getBiomeProvider null
    has_storm = RWProp[bool]("hasStorm", "setStorm")
    has_sky_light = ROProp[bool]("hasSkyLight")
    allow_monsters = ROProp[bool]("getAllowMonsters")
    # TODO: property difficulty getDifficulty setDifficulty
    has_ceiling = ROProp[bool]("hasCeiling")
    view_distance = RWProp[int]("getViewDistance", "setViewDistance")
    p_v_p = RWProp[bool]("getPVP", "setPVP")
    coordinate_scale = ROProp[float]("getCoordinateScale")
    entity_count = ROProp[int]("getEntityCount")
    simulation_distance = RWProp[int]("getSimulationDistance", "setSimulationDistance")
    chunk_count = ROProp[int]("getChunkCount")
    is_day_time = ROProp[bool]("isDayTime")
    game_time = ROProp[int]("getGameTime")
    player_count = ROProp[int]("getPlayerCount")
    # TODO: property spawn_location getSpawnLocation null
    is_ultra_warm = ROProp[bool]("isUltraWarm")
    is_bed_works = ROProp[bool]("isBedWorks")
    send_view_distance = RWProp[int]("getSendViewDistance", "setSendViewDistance")
    # TODO: property force_loaded_chunks getForceLoadedChunks null
    # TODO: property feature_flags getFeatureFlags null
    tile_entity_count = ROProp[int]("getTileEntityCount")
    # TODO: property loaded_chunks getLoadedChunks null
    full_time = RWProp[int]("getFullTime", "setFullTime")
    sea_level = ROProp[int]("getSeaLevel")
    is_piglin_safe = ROProp[bool]("isPiglinSafe")
    is_thundering = RWProp[bool]("isThundering", "setThundering")
    weather_duration = RWProp[int]("getWeatherDuration", "setWeatherDuration")
    # TODO: property world_folder getWorldFolder null
    is_fixed_time = ROProp[bool]("isFixedTime")
    # TODO: property generator getGenerator null
    time = RWProp[int]("getTime", "setTime")
    is_clear_weather = ROProp[bool]("isClearWeather")
    is_natural = ROProp[bool]("isNatural")
    thunder_duration = RWProp[int]("getThunderDuration", "setThunderDuration")
    is_respawn_anchor_works = ROProp[bool]("isRespawnAnchorWorks")
    # TODO: property ender_dragon_battle getEnderDragonBattle null
    # TODO: property world_border getWorldBorder null
    tickable_tile_entity_count = ROProp[int]("getTickableTileEntityCount")
    # TODO: property players getPlayers null
    can_generate_structures = ROProp[bool]("canGenerateStructures")
    # TODO: property populators getPopulators null
    # TODO: property game_rules getGameRules null
    is_hardcore = RWProp[bool]("isHardcore", "setHardcore")
    keep_spawn_in_memory = RWProp[bool]("getKeepSpawnInMemory", "setKeepSpawnInMemory")
    logical_height = ROProp[int]("getLogicalHeight")
    clear_weather_duration = RWProp[int]("getClearWeatherDuration", "setClearWeatherDuration")
    is_auto_save = RWProp[bool]("isAutoSave", "setAutoSave")
    # TODO: property infiniburn getInfiniburn null
    # TODO: property plugin_chunk_tickets getPluginChunkTickets null
    # TODO: method private static java.lang.Void org.bukkit.World.lambda$getChunkAtAsync$3(java.lang.Throwable)
    # TODO: method private static java.lang.Void org.bukkit.World.lambda$getChunkAtAsync$4(java.lang.Throwable)
    # TODO: method public abstract org.bukkit.Location org.bukkit.World.findLightningTarget(org.bukkit.Location)
    # TODO: method public abstract boolean org.bukkit.World.isChunkGenerated(int,int)
    # TODO: method public default boolean org.bukkit.World.isChunkGenerated(long)
    # TODO: method private static java.lang.Void org.bukkit.World.lambda$getChunkAtAsync$0(java.lang.Throwable)
    # TODO: method public abstract boolean org.bukkit.World.isChunkLoaded(org.bukkit.Chunk)
    # TODO: method public abstract boolean org.bukkit.World.isChunkLoaded(int,int)
    # TODO: method private static java.lang.Void org.bukkit.World.lambda$getChunkAtAsync$1(java.lang.Throwable)
    # TODO: method private static java.lang.Void org.bukkit.World.lambda$getChunkAtAsync$2(java.lang.Throwable)
    # TODO: method public abstract double org.bukkit.World.getTemperature(int,int,int)
    # TODO: method public abstract org.bukkit.Location org.bukkit.World.findLightningRod(org.bukkit.Location)
    # TODO: method public abstract boolean org.bukkit.World.setSpawnLocation(org.bukkit.Location)
    # TODO: method public abstract boolean org.bukkit.World.setSpawnLocation(int,int,int,float)
    # TODO: method public abstract boolean org.bukkit.World.setSpawnLocation(int,int,int)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.entity.Entity,java.lang.String,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.entity.Entity,org.bukkit.Sound,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.entity.Entity,java.lang.String,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.entity.Entity,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.entity.Entity,org.bukkit.Sound,float,float)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.entity.Entity,java.lang.String,float,float)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.Location,java.lang.String,float,float)
    # TODO: method public abstract boolean org.bukkit.World.addPluginChunkTicket(int,int,org.bukkit.plugin.Plugin)
    # TODO: method public abstract void org.bukkit.World.playSound(org.bukkit.Location,org.bukkit.Sound,float,float)
    def save(self): self._delegate.save()
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsyncUrgently(org.bukkit.Location,boolean)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsyncUrgently(org.bukkit.Location)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsyncUrgently(org.bukkit.block.Block)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsyncUrgently(int,int)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsyncUrgently(org.bukkit.block.Block,boolean)
    # TODO: method public abstract boolean org.bukkit.World.isChunkForceLoaded(int,int)
    # TODO: method public abstract java.util.List<org.bukkit.Raid> org.bukkit.World.getRaids()
    # TODO: method public abstract org.bukkit.entity.Entity org.bukkit.World.getEntity(java.util.UUID)
    # TODO: method public abstract org.bukkit.entity.LightningStrike org.bukkit.World.strikeLightningEffect(org.bukkit.Location)
    # TODO: method public abstract void org.bukkit.World.removePluginChunkTickets(org.bukkit.plugin.Plugin)
    # TODO: method public abstract org.bukkit.Raid org.bukkit.World.getRaid(int)
    # TODO: method public abstract org.bukkit.entity.Item org.bukkit.World.dropItemNaturally(org.bukkit.Location,org.bukkit.inventory.ItemStack,java.util.function.Consumer<? super org.bukkit.entity.Item>)
    # TODO: method public abstract org.bukkit.entity.Item org.bukkit.World.dropItemNaturally(org.bukkit.Location,org.bukkit.inventory.ItemStack)
    # TODO: method public abstract <T> boolean org.bukkit.World.setGameRule(org.bukkit.GameRule<T>,T)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,double)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,double,java.util.function.Predicate<? super org.bukkit.entity.Entity>)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceEntities(io.papermc.paper.math.Position,org.bukkit.util.Vector,double,double,java.util.function.Predicate<? super org.bukkit.entity.Entity>)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,java.util.function.Predicate<? super org.bukkit.entity.Entity>)
    # TODO: method public abstract org.bukkit.Chunk org.bukkit.World.getChunkAt(org.bukkit.Location)
    # TODO: method public abstract org.bukkit.Chunk org.bukkit.World.getChunkAt(int,int,boolean)
    # TODO: method public abstract org.bukkit.Chunk org.bukkit.World.getChunkAt(org.bukkit.block.Block)
    # TODO: method public default org.bukkit.Chunk org.bukkit.World.getChunkAt(long)
    # TODO: method public abstract org.bukkit.Chunk org.bukkit.World.getChunkAt(int,int)
    # TODO: method public default org.bukkit.Chunk org.bukkit.World.getChunkAt(long,boolean)
    # TODO: method public abstract void org.bukkit.World.sendGameEvent(org.bukkit.entity.Entity,org.bukkit.GameEvent,org.bukkit.util.Vector)
    # TODO: method public abstract void org.bukkit.World.setSpawnFlags(boolean,boolean)
    # TODO: method public default java.util.Collection<org.bukkit.entity.LivingEntity> org.bukkit.World.getNearbyLivingEntities(org.bukkit.Location,double,double,java.util.function.Predicate<? super org.bukkit.entity.LivingEntity>)
    # TODO: method public default java.util.Collection<org.bukkit.entity.LivingEntity> org.bukkit.World.getNearbyLivingEntities(org.bukkit.Location,double,java.util.function.Predicate<? super org.bukkit.entity.LivingEntity>)
    # TODO: method public default java.util.Collection<org.bukkit.entity.LivingEntity> org.bukkit.World.getNearbyLivingEntities(org.bukkit.Location,double,double,double,java.util.function.Predicate<? super org.bukkit.entity.LivingEntity>)
    # TODO: method public default java.util.Collection<org.bukkit.entity.LivingEntity> org.bukkit.World.getNearbyLivingEntities(org.bukkit.Location,double,double)
    # TODO: method public default java.util.Collection<org.bukkit.entity.LivingEntity> org.bukkit.World.getNearbyLivingEntities(org.bukkit.Location,double,double,double)
    # TODO: method public default java.util.Collection<org.bukkit.entity.LivingEntity> org.bukkit.World.getNearbyLivingEntities(org.bukkit.Location,double)
    # TODO: method public abstract org.bukkit.util.StructureSearchResult org.bukkit.World.locateNearestStructure(org.bukkit.Location,org.bukkit.generator.structure.StructureType,int,boolean)
    # TODO: method public abstract org.bukkit.util.StructureSearchResult org.bukkit.World.locateNearestStructure(org.bukkit.Location,org.bukkit.generator.structure.Structure,int,boolean)
    # TODO: method public abstract java.util.Collection<org.bukkit.Chunk> org.bukkit.World.getIntersectingChunks(org.bukkit.util.BoundingBox)
    # TODO: method public abstract void org.bukkit.World.setSpawnLimit(org.bukkit.entity.SpawnCategory,int)
    # TODO: method public abstract void org.bukkit.World.setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)
    # TODO: method public abstract org.bukkit.util.BiomeSearchResult org.bukkit.World.locateNearestBiome(org.bukkit.Location,int,org.bukkit.block.Biome...)
    # TODO: method public abstract org.bukkit.util.BiomeSearchResult org.bukkit.World.locateNearestBiome(org.bukkit.Location,int,int,int,org.bukkit.block.Biome...)
    # TODO: method public abstract <T extends org.bukkit.entity.LivingEntity> T org.bukkit.World.spawn(org.bukkit.Location,java.lang.Class<T>,org.bukkit.event.entity.CreatureSpawnEvent$SpawnReason,boolean,java.util.function.Consumer<? super T>) throws java.lang.IllegalArgumentException
    # TODO: method public abstract boolean org.bukkit.World.hasStructureAt(io.papermc.paper.math.Position,org.bukkit.generator.structure.Structure)
    # TODO: method public default java.util.Collection<org.bukkit.entity.Player> org.bukkit.World.getNearbyPlayers(org.bukkit.Location,double,double,double,java.util.function.Predicate<? super org.bukkit.entity.Player>)
    # TODO: method public default java.util.Collection<org.bukkit.entity.Player> org.bukkit.World.getNearbyPlayers(org.bukkit.Location,double,double)
    # TODO: method public default java.util.Collection<org.bukkit.entity.Player> org.bukkit.World.getNearbyPlayers(org.bukkit.Location,double,java.util.function.Predicate<? super org.bukkit.entity.Player>)
    # TODO: method public default java.util.Collection<org.bukkit.entity.Player> org.bukkit.World.getNearbyPlayers(org.bukkit.Location,double,double,java.util.function.Predicate<? super org.bukkit.entity.Player>)
    # TODO: method public default java.util.Collection<org.bukkit.entity.Player> org.bukkit.World.getNearbyPlayers(org.bukkit.Location,double,double,double)
    # TODO: method public default java.util.Collection<org.bukkit.entity.Player> org.bukkit.World.getNearbyPlayers(org.bukkit.Location,double)
    # TODO: method public abstract boolean org.bukkit.World.refreshChunk(int,int)
    # TODO: method public abstract boolean org.bukkit.World.unloadChunk(int,int,boolean)
    # TODO: method public abstract boolean org.bukkit.World.unloadChunk(int,int)
    # TODO: method public abstract boolean org.bukkit.World.unloadChunk(org.bukkit.Chunk)
    # TODO: method public abstract org.bukkit.Raid org.bukkit.World.locateNearestRaid(org.bukkit.Location,int)
    # TODO: method public abstract org.bukkit.block.Block org.bukkit.World.getBlockAt(int,int,int)
    # TODO: method public abstract org.bukkit.block.Block org.bukkit.World.getBlockAt(org.bukkit.Location)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTrace(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean,double,java.util.function.Predicate<? super org.bukkit.entity.Entity>)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTrace(io.papermc.paper.math.Position,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean,double,java.util.function.Predicate<? super org.bukkit.entity.Entity>,java.util.function.Predicate<? super org.bukkit.block.Block>)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(org.bukkit.entity.Entity,org.bukkit.Location,float,boolean,boolean)
    # TODO: method public default boolean org.bukkit.World.createExplosion(org.bukkit.entity.Entity,org.bukkit.Location,float)
    # TODO: method public default boolean org.bukkit.World.createExplosion(org.bukkit.entity.Entity,float,boolean)
    # TODO: method public default boolean org.bukkit.World.createExplosion(org.bukkit.entity.Entity,float,boolean,boolean)
    # TODO: method public default boolean org.bukkit.World.createExplosion(org.bukkit.entity.Entity,org.bukkit.Location,float,boolean)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(double,double,double,float)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(org.bukkit.Location,float,boolean)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(double,double,double,float,boolean,boolean)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(org.bukkit.Location,float)
    # TODO: method public default boolean org.bukkit.World.createExplosion(org.bukkit.entity.Entity,float)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(org.bukkit.Location,float,boolean,boolean)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(double,double,double,float,boolean)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(org.bukkit.Location,float,boolean,boolean,org.bukkit.entity.Entity)
    # TODO: method public abstract boolean org.bukkit.World.createExplosion(double,double,double,float,boolean,boolean,org.bukkit.entity.Entity)
    # TODO: method public abstract java.util.Collection<org.bukkit.generator.structure.GeneratedStructure> org.bukkit.World.getStructures(int,int,org.bukkit.generator.structure.Structure)
    # TODO: method public abstract java.util.Collection<org.bukkit.generator.structure.GeneratedStructure> org.bukkit.World.getStructures(int,int)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode)
    # TODO: method public abstract org.bukkit.util.RayTraceResult org.bukkit.World.rayTraceBlocks(io.papermc.paper.math.Position,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean,java.util.function.Predicate<? super org.bukkit.block.Block>)
    # TODO: method public abstract boolean org.bukkit.World.isGameRule(java.lang.String)
    # TODO: method public abstract org.bukkit.entity.LightningStrike org.bukkit.World.strikeLightning(org.bukkit.Location)
    # TODO: method public abstract boolean org.bukkit.World.hasRaids()
    # TODO: method public abstract boolean org.bukkit.World.removePluginChunkTicket(int,int,org.bukkit.plugin.Plugin)
    # TODO: method public abstract long org.bukkit.World.getTicksPerSpawns(org.bukkit.entity.SpawnCategory)
    # TODO: method public default <T extends org.bukkit.entity.Entity> java.util.Collection<T> org.bukkit.World.getNearbyEntitiesByType(java.lang.Class<? extends T>,org.bukkit.Location,double)
    # TODO: method public default <T extends org.bukkit.entity.Entity> java.util.Collection<T> org.bukkit.World.getNearbyEntitiesByType(java.lang.Class<? extends T>,org.bukkit.Location,double,java.util.function.Predicate<? super T>)
    # TODO: method public default <T extends org.bukkit.entity.Entity> java.util.Collection<T> org.bukkit.World.getNearbyEntitiesByType(java.lang.Class<? extends T>,org.bukkit.Location,double,double,java.util.function.Predicate<? super T>)
    # TODO: method public default <T extends org.bukkit.entity.Entity> java.util.Collection<T> org.bukkit.World.getNearbyEntitiesByType(java.lang.Class<? extends T>,org.bukkit.Location,double,double)
    # TODO: method public default <T extends org.bukkit.entity.Entity> java.util.Collection<T> org.bukkit.World.getNearbyEntitiesByType(java.lang.Class<? extends org.bukkit.entity.Entity>,org.bukkit.Location,double,double,double,java.util.function.Predicate<? super T>)
    # TODO: method public default <T extends org.bukkit.entity.Entity> java.util.Collection<T> org.bukkit.World.getNearbyEntitiesByType(java.lang.Class<? extends T>,org.bukkit.Location,double,double,double)
    # TODO: method public abstract void org.bukkit.World.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double)
    # TODO: method public default <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,java.util.List<org.bukkit.entity.Player>,org.bukkit.entity.Player,double,double,double,int,double,double,double,double,T)
    # TODO: method public default <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T)
    # TODO: method public abstract void org.bukkit.World.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double)
    # TODO: method public abstract void org.bukkit.World.spawnParticle(org.bukkit.Particle,double,double,double,int)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,T)
    # TODO: method public abstract void org.bukkit.World.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double)
    # TODO: method public abstract void org.bukkit.World.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,double,double,double,int,T)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T,boolean)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T,boolean)
    # TODO: method public abstract void org.bukkit.World.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,T)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,java.util.List<org.bukkit.entity.Player>,org.bukkit.entity.Player,double,double,double,int,double,double,double,double,T,boolean)
    # TODO: method public abstract <T> void org.bukkit.World.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,T)
    # TODO: method public default boolean org.bukkit.World.isPositionLoaded(io.papermc.paper.math.Position)
    # TODO: method public abstract <T> void org.bukkit.World.playEffect(org.bukkit.Location,org.bukkit.Effect,T,int)
    # TODO: method public abstract void org.bukkit.World.playEffect(org.bukkit.Location,org.bukkit.Effect,int)
    # TODO: method public abstract <T> void org.bukkit.World.playEffect(org.bukkit.Location,org.bukkit.Effect,T)
    # TODO: method public abstract void org.bukkit.World.playEffect(org.bukkit.Location,org.bukkit.Effect,int,int)
    # TODO: method public abstract <T> T org.bukkit.World.getGameRuleDefault(org.bukkit.GameRule<T>)
    # TODO: method public abstract void org.bukkit.World.loadChunk(int,int)
    # TODO: method public abstract void org.bukkit.World.loadChunk(org.bukkit.Chunk)
    # TODO: method public abstract boolean org.bukkit.World.loadChunk(int,int,boolean)
    # TODO: method public abstract int org.bukkit.World.getSpawnLimit(org.bukkit.entity.SpawnCategory)
    # TODO: method public abstract java.util.Collection<org.bukkit.plugin.Plugin> org.bukkit.World.getPluginChunkTickets(int,int)
    # TODO: method public abstract java.util.Collection<org.bukkit.entity.Entity> org.bukkit.World.getNearbyEntities(org.bukkit.Location,double,double,double)
    # TODO: method public abstract java.util.Collection<org.bukkit.entity.Entity> org.bukkit.World.getNearbyEntities(org.bukkit.Location,double,double,double,java.util.function.Predicate<? super org.bukkit.entity.Entity>)
    # TODO: method public abstract java.util.Collection<org.bukkit.entity.Entity> org.bukkit.World.getNearbyEntities(org.bukkit.util.BoundingBox)
    # TODO: method public abstract java.util.Collection<org.bukkit.entity.Entity> org.bukkit.World.getNearbyEntities(org.bukkit.util.BoundingBox,java.util.function.Predicate<? super org.bukkit.entity.Entity>)
    # TODO: method public abstract boolean org.bukkit.World.unloadChunkRequest(int,int)
    # TODO: method public abstract org.bukkit.entity.Item org.bukkit.World.dropItem(org.bukkit.Location,org.bukkit.inventory.ItemStack)
    # TODO: method public abstract org.bukkit.entity.Item org.bukkit.World.dropItem(org.bukkit.Location,org.bukkit.inventory.ItemStack,java.util.function.Consumer<? super org.bukkit.entity.Item>)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsync(org.bukkit.block.Block,boolean)
    # TODO: method public abstract java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsync(int,int,boolean,boolean)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsync(int,int,boolean)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsync(org.bukkit.Location,boolean)
    # TODO: method public default void org.bukkit.World.getChunkAtAsync(org.bukkit.block.Block,boolean,java.util.function.Consumer<? super org.bukkit.Chunk>)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsync(org.bukkit.block.Block)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsync(int,int)
    # TODO: method public default void org.bukkit.World.getChunkAtAsync(int,int,boolean,java.util.function.Consumer<? super org.bukkit.Chunk>)
    # TODO: method public default void org.bukkit.World.getChunkAtAsync(org.bukkit.Location,java.util.function.Consumer<? super org.bukkit.Chunk>)
    # TODO: method public default java.util.concurrent.CompletableFuture<org.bukkit.Chunk> org.bukkit.World.getChunkAtAsync(org.bukkit.Location)
    # TODO: method public default void org.bukkit.World.getChunkAtAsync(org.bukkit.Location,boolean,java.util.function.Consumer<? super org.bukkit.Chunk>)
    # TODO: method public default void org.bukkit.World.getChunkAtAsync(int,int,java.util.function.Consumer<? super org.bukkit.Chunk>)
    # TODO: method public default void org.bukkit.World.getChunkAtAsync(org.bukkit.block.Block,java.util.function.Consumer<? super org.bukkit.Chunk>)
    # TODO: method public abstract <T extends org.bukkit.entity.AbstractArrow> T org.bukkit.World.spawnArrow(org.bukkit.Location,org.bukkit.util.Vector,float,float,java.lang.Class<T>)
    # TODO: method public abstract org.bukkit.entity.Arrow org.bukkit.World.spawnArrow(org.bukkit.Location,org.bukkit.util.Vector,float,float)
    # TODO: method public abstract <T> T org.bukkit.World.getGameRuleValue(org.bukkit.GameRule<T>)
    # TODO: method public abstract org.bukkit.ChunkSnapshot org.bukkit.World.getEmptyChunkSnapshot(int,int,boolean,boolean)
    # TODO: method public abstract void org.bukkit.World.playNote(org.bukkit.Location,org.bukkit.Instrument,org.bukkit.Note)
    # TODO: method public abstract void org.bukkit.World.setChunkForceLoaded(int,int,boolean)
    # TODO: method public abstract double org.bukkit.World.getHumidity(int,int,int)
    # TODO: method public abstract org.bukkit.block.Block org.bukkit.World.getHighestBlockAt(int,int)
    # TODO: method public abstract org.bukkit.block.Block org.bukkit.World.getHighestBlockAt(int,int,org.bukkit.HeightMap)
    # TODO: method public abstract org.bukkit.block.Block org.bukkit.World.getHighestBlockAt(org.bukkit.Location,org.bukkit.HeightMap)
    # TODO: method public abstract org.bukkit.block.Block org.bukkit.World.getHighestBlockAt(org.bukkit.Location)
    # TODO: method public abstract boolean org.bukkit.World.generateTree(org.bukkit.Location,org.bukkit.TreeType)
    # TODO: method public abstract org.bukkit.entity.FallingBlock org.bukkit.World.spawnFallingBlock(org.bukkit.Location,org.bukkit.block.data.BlockData) throws java.lang.IllegalArgumentException
