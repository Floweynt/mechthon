from mechs.bindings.misc import BossBarViewer, Conversable, Identified, NetworkClient, OfflinePlayer, PluginMessageRecipient
from mechs._internal import *
from mechs._internal.mirrors import *
from ._living import HumanEntity

class Player(HumanEntity, Conversable, OfflinePlayer, PluginMessageRecipient, Identified, BossBarViewer, NetworkClient):
    @binding_constructor("org.bukkit.entity.Player")
    def __init__(self, delegate: BukkitType):
        self._delegate = delegate

    is_health_scaled = RWProp[bool]("isHealthScaled", "setHealthScaled")
    is_sprinting = RWProp[bool]("isSprinting", "setSprinting")
    # TODO: property previous_game_mode getPreviousGameMode null
    fly_speed = RWProp[float]("getFlySpeed", "setFlySpeed")
    has_resource_pack = ROProp[bool]("hasResourcePack")
    exp_cooldown = RWProp[int]("getExpCooldown", "setExpCooldown")
    view_distance = RWProp[int]("getViewDistance", "setViewDistance")
    is_allowing_server_listings = ROProp[bool]("isAllowingServerListings")
    # TODO: property has_flying_fall_damage hasFlyingFallDamage setFlyingFallDamage
    walk_speed = RWProp[float]("getWalkSpeed", "setWalkSpeed")
    is_sleeping_ignored = RWProp[bool]("isSleepingIgnored", "setSleepingIgnored")
    affects_spawning = RWProp[bool]("getAffectsSpawning", "setAffectsSpawning")
    allow_flight = RWProp[bool]("getAllowFlight", "setAllowFlight")
    player_time = ROProp[int]("getPlayerTime")
    # TODO: property spectator_target getSpectatorTarget setSpectatorTarget
    # TODO: property scoreboard getScoreboard setScoreboard
    simulation_distance = RWProp[int]("getSimulationDistance", "setSimulationDistance")
    # TODO: property resource_pack_status getResourcePackStatus null
    # TODO: property sent_chunks getSentChunks null
    # TODO: property world_border getWorldBorder setWorldBorder
    # TODO: property compass_target getCompassTarget setCompassTarget
    warden_warning_level = RWProp[int]("getWardenWarningLevel", "setWardenWarningLevel")
    # TODO: property sent_chunk_keys getSentChunkKeys null
    has_seen_win_screen = RWProp[bool]("hasSeenWinScreen", "setHasSeenWinScreen")
    experience_points_needed_for_next_level = ROProp[int]("getExperiencePointsNeededForNextLevel")
    is_player_time_relative = ROProp[bool]("isPlayerTimeRelative")
    send_view_distance = RWProp[int]("getSendViewDistance", "setSendViewDistance")
    total_experience = RWProp[int]("getTotalExperience", "setTotalExperience")
    player_time_offset = ROProp[int]("getPlayerTimeOffset")
    # TODO: property client_brand_name getClientBrandName null
    health_scale = RWProp[float]("getHealthScale", "setHealthScale")
    # TODO: property idle_duration getIdleDuration null
    is_flying = RWProp[bool]("isFlying", "setFlying")
    warden_time_since_last_warning = RWProp[int]("getWardenTimeSinceLastWarning", "setWardenTimeSinceLastWarning")
    ping = ROProp[int]("getPing")
    cooldown_period = ROProp[float]("getCooldownPeriod")
    warden_warning_cooldown = RWProp[int]("getWardenWarningCooldown", "setWardenWarningCooldown")
    level = RWProp[int]("getLevel", "setLevel")
    exp = RWProp[float]("getExp", "setExp")
    client_view_distance = ROProp[int]("getClientViewDistance")
    def update_commands(self): self._delegate.updateCommands()
    # TODO: method public abstract void org.bukkit.entity.Player.sendHurtAnimation(float)
    # TODO: method public abstract void org.bukkit.entity.Player.sendHealthUpdate(double,int,float)
    def send_health_update(self): self._delegate.sendHealthUpdate()
    # TODO: method public default void org.bukkit.entity.Player.setResourcePack(java.lang.String,byte[],net.kyori.adventure.text.Component,boolean)
    # TODO: method public default void org.bukkit.entity.Player.setResourcePack(java.lang.String,byte[],net.kyori.adventure.text.Component)
    # TODO: method public default void org.bukkit.entity.Player.setResourcePack(java.util.UUID,java.lang.String,java.lang.String,net.kyori.adventure.text.Component,boolean)
    # TODO: method public default void org.bukkit.entity.Player.setResourcePack(java.lang.String,java.lang.String,boolean,net.kyori.adventure.text.Component)
    # TODO: method public default void org.bukkit.entity.Player.setResourcePack(java.lang.String,java.lang.String,boolean)
    # TODO: method public default void org.bukkit.entity.Player.setResourcePack(java.lang.String,java.lang.String)
    # TODO: method public abstract void org.bukkit.entity.Player.setResourcePack(java.util.UUID,java.lang.String,byte[],net.kyori.adventure.text.Component,boolean)
    # TODO: method public abstract void org.bukkit.entity.Player.hidePlayer(org.bukkit.plugin.Plugin,org.bukkit.entity.Player)
    # TODO: method public abstract void org.bukkit.entity.Player.sendBlockChanges(java.util.Collection<org.bukkit.block.BlockState>)
    # TODO: method public abstract void org.bukkit.entity.Player.lookAt(double,double,double,io.papermc.paper.entity.LookAnchor)
    # TODO: method public default void org.bukkit.entity.Player.lookAt(io.papermc.paper.math.Position,io.papermc.paper.entity.LookAnchor)
    # TODO: method public abstract void org.bukkit.entity.Player.lookAt(org.bukkit.entity.Entity,io.papermc.paper.entity.LookAnchor,io.papermc.paper.entity.LookAnchor)
    def save_data(self): self._delegate.saveData()
    # TODO: method public abstract boolean org.bukkit.entity.Player.performCommand(java.lang.String)
    def reset_cooldown(self): self._delegate.resetCooldown()
    # TODO: method public abstract void org.bukkit.entity.Player.setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile)
    # TODO: method public abstract void org.bukkit.entity.Player.playNote(org.bukkit.Location,org.bukkit.Instrument,org.bukkit.Note)
    def show_demo_screen(self): self._delegate.showDemoScreen()
    # TODO: method public default boolean org.bukkit.entity.Player.isChunkSent(org.bukkit.Chunk)
    # TODO: method public abstract boolean org.bukkit.entity.Player.isChunkSent(long)
    # TODO: method public abstract void org.bukkit.entity.Player.openBook(org.bukkit.inventory.ItemStack)
    # TODO: method public abstract net.kyori.adventure.text.Component org.bukkit.entity.Player.playerListHeader()
    # TODO: method public abstract void org.bukkit.entity.Player.sendMap(org.bukkit.map.MapView)
    def reset_idle_duration(self): self._delegate.resetIdleDuration()
    # TODO: method public abstract java.util.Locale org.bukkit.entity.Player.locale()
    def show_win_screen(self): self._delegate.showWinScreen()
    def increase_warden_warning_level(self): self._delegate.increaseWardenWarningLevel()
    # TODO: method public abstract boolean org.bukkit.entity.Player.breakBlock(org.bukkit.block.Block)
    # TODO: method public abstract boolean org.bukkit.entity.Player.unlistPlayer(org.bukkit.entity.Player)
    # TODO: method public abstract void org.bukkit.entity.Player.setPlayerWeather(org.bukkit.WeatherType)
    # TODO: method public abstract void org.bukkit.entity.Player.removeResourcePack(java.util.UUID)
    # TODO: method public abstract void org.bukkit.entity.Player.removeCustomChatCompletions(java.util.Collection<java.lang.String>)
    # TODO: method public abstract void org.bukkit.entity.Player.sendOpLevel(byte)
    # TODO: method public abstract void org.bukkit.entity.Player.setCustomChatCompletions(java.util.Collection<java.lang.String>)
    def reset_player_weather(self): self._delegate.resetPlayerWeather()
    # TODO: method public abstract net.kyori.adventure.text.Component org.bukkit.entity.Player.playerListFooter()
    def update_inventory(self): self._delegate.updateInventory()
    # TODO: method public abstract void org.bukkit.entity.Player.giveExpLevels(int)
    # TODO: method public abstract boolean org.bukkit.entity.Player.isListed(org.bukkit.entity.Player)
    # TODO: method public abstract void org.bukkit.entity.Player.sendBlockDamage(org.bukkit.Location,float,org.bukkit.entity.Entity)
    # TODO: method public abstract void org.bukkit.entity.Player.sendBlockDamage(org.bukkit.Location,float)
    # TODO: method public abstract void org.bukkit.entity.Player.sendBlockDamage(org.bukkit.Location,float,int)
    # TODO: method public abstract <E extends org.bukkit.BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E org.bukkit.entity.Player.ban(java.lang.String,java.time.Instant,java.lang.String,boolean)
    # TODO: method public abstract <E extends org.bukkit.BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E org.bukkit.entity.Player.ban(java.lang.String,java.time.Duration,java.lang.String,boolean)
    # TODO: method public abstract <E extends org.bukkit.BanEntry<? super com.destroystokyo.paper.profile.PlayerProfile>> E org.bukkit.entity.Player.ban(java.lang.String,java.util.Date,java.lang.String,boolean)
    # TODO: method public abstract int org.bukkit.entity.Player.calculateTotalExperiencePoints()
    # TODO: method public abstract float org.bukkit.entity.Player.getCooledAttackStrength(float)
    # TODO: method public abstract void org.bukkit.entity.Player.setPlayerTime(long,boolean)
    # TODO: method public abstract org.bukkit.BanEntry<java.net.InetAddress> org.bukkit.entity.Player.banIp(java.lang.String,java.time.Instant,java.lang.String,boolean)
    # TODO: method public abstract org.bukkit.BanEntry<java.net.InetAddress> org.bukkit.entity.Player.banIp(java.lang.String,java.time.Duration,java.lang.String,boolean)
    # TODO: method public abstract org.bukkit.BanEntry<java.net.InetAddress> org.bukkit.entity.Player.banIp(java.lang.String,java.util.Date,java.lang.String,boolean)
    # TODO: method public abstract void org.bukkit.entity.Player.sendBlockUpdate(org.bukkit.Location,org.bukkit.block.TileState) throws java.lang.IllegalArgumentException
    # TODO: method public abstract boolean org.bukkit.entity.Player.canSee(org.bukkit.entity.Entity)
    # TODO: method public abstract boolean org.bukkit.entity.Player.canSee(org.bukkit.entity.Player)
    # TODO: method public abstract void org.bukkit.entity.Player.sendBlockChange(org.bukkit.Location,org.bukkit.block.data.BlockData)
    # TODO: method public abstract void org.bukkit.entity.Player.setExperienceLevelAndProgress(int)
    # TODO: method public abstract <T> T org.bukkit.entity.Player.getClientOption(com.destroystokyo.paper.ClientOption<T>)
    # TODO: method public abstract void org.bukkit.entity.Player.sendExperienceChange(float,int)
    # TODO: method public abstract void org.bukkit.entity.Player.sendExperienceChange(float)
    # TODO: method public abstract void org.bukkit.entity.Player.showPlayer(org.bukkit.plugin.Plugin,org.bukkit.entity.Player)
    def remove_resource_packs(self): self._delegate.removeResourcePacks()
    # TODO: method public abstract int org.bukkit.entity.Player.applyMending(int)
    # TODO: method public abstract void org.bukkit.entity.Player.showElderGuardian(boolean)
    def show_elder_guardian(self): self._delegate.showElderGuardian()
    # TODO: method public default void org.bukkit.entity.Player.giveExp(int)
    # TODO: method public abstract void org.bukkit.entity.Player.giveExp(int,boolean)
    # TODO: method public abstract void org.bukkit.entity.Player.showEntity(org.bukkit.plugin.Plugin,org.bukkit.entity.Entity)
    # TODO: method public abstract boolean org.bukkit.entity.Player.listPlayer(org.bukkit.entity.Player)
    # TODO: method public abstract void org.bukkit.entity.Player.sendPotionEffectChange(org.bukkit.entity.LivingEntity,org.bukkit.potion.PotionEffect)
    # TODO: method public abstract void org.bukkit.entity.Player.sendPotionEffectChangeRemove(org.bukkit.entity.LivingEntity,org.bukkit.potion.PotionEffectType)
    # TODO: method public abstract <T> void org.bukkit.entity.Player.playEffect(org.bukkit.Location,org.bukkit.Effect,T)
    def load_data(self): self._delegate.loadData()
    # TODO: method public abstract void org.bukkit.entity.Player.sendEquipmentChange(org.bukkit.entity.LivingEntity,org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack)
    # TODO: method public abstract void org.bukkit.entity.Player.sendEquipmentChange(org.bukkit.entity.LivingEntity,java.util.Map<org.bukkit.inventory.EquipmentSlot, org.bukkit.inventory.ItemStack>)
    # TODO: method public default org.bukkit.entity.Firework org.bukkit.entity.Player.boostElytra(org.bukkit.inventory.ItemStack)
    # TODO: method public abstract net.kyori.adventure.text.Component org.bukkit.entity.Player.displayName()
    # TODO: method public abstract void org.bukkit.entity.Player.displayName(net.kyori.adventure.text.Component)
    # TODO: method public abstract <T> void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T)
    # TODO: method public abstract void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,double,double,double,int)
    # TODO: method public abstract void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int)
    # TODO: method public abstract void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double)
    # TODO: method public abstract org.bukkit.advancement.AdvancementProgress org.bukkit.entity.Player.getAdvancementProgress(org.bukkit.advancement.Advancement)
    # TODO: method public abstract void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double)
    # TODO: method public abstract <T> void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,T)
    # TODO: method public abstract void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double)
    # TODO: method public abstract <T> void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,T)
    # TODO: method public abstract <T> void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T)
    # TODO: method public abstract <T> void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,T)
    # TODO: method public abstract <T> void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,double,double,double,int,T)
    # TODO: method public abstract void org.bukkit.entity.Player.spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double)
    # TODO: method public abstract void org.bukkit.entity.Player.sendMultiBlockChange(java.util.Map<? extends io.papermc.paper.math.Position, org.bukkit.block.data.BlockData>)
    # TODO: method public abstract void org.bukkit.entity.Player.addResourcePack(java.util.UUID,java.lang.String,byte[],java.lang.String,boolean)
    # TODO: method public abstract void org.bukkit.entity.Player.stopSound(java.lang.String,org.bukkit.SoundCategory)
    # TODO: method public abstract void org.bukkit.entity.Player.stopSound(org.bukkit.Sound,org.bukkit.SoundCategory)
    # TODO: method public abstract void org.bukkit.entity.Player.stopSound(java.lang.String)
    # TODO: method public abstract void org.bukkit.entity.Player.stopSound(org.bukkit.Sound)
    # TODO: method public abstract void org.bukkit.entity.Player.stopSound(org.bukkit.SoundCategory)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.entity.Entity,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.entity.Entity,org.bukkit.Sound,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.entity.Entity,java.lang.String,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.Location,java.lang.String,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.entity.Entity,org.bukkit.Sound,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.entity.Entity,java.lang.String,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float,long)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.Location,org.bukkit.Sound,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.playSound(org.bukkit.entity.Entity,java.lang.String,org.bukkit.SoundCategory,float,float)
    # TODO: method public abstract void org.bukkit.entity.Player.addCustomChatCompletions(java.util.Collection<java.lang.String>)
    # TODO: method public abstract void org.bukkit.entity.Player.setRespawnLocation(org.bukkit.Location,boolean)
    # TODO: method public abstract void org.bukkit.entity.Player.setRespawnLocation(org.bukkit.Location)
    def reset_player_time(self): self._delegate.resetPlayerTime()
    def stop_all_sounds(self): self._delegate.stopAllSounds()
    # TODO: method public abstract net.kyori.adventure.text.Component org.bukkit.entity.Player.playerListName()
    # TODO: method public abstract void org.bukkit.entity.Player.playerListName(net.kyori.adventure.text.Component)
    # TODO: method public abstract org.bukkit.WeatherType org.bukkit.entity.Player.getPlayerWeather()
    # TODO: method public abstract void org.bukkit.entity.Player.hideEntity(org.bukkit.plugin.Plugin,org.bukkit.entity.Entity)
    # TODO: method public abstract void org.bukkit.entity.Player.chat(java.lang.String)
    def kick(self): self._delegate.kick()
    # TODO: method public abstract void org.bukkit.entity.Player.kick(net.kyori.adventure.text.Component)
    # TODO: method public abstract void org.bukkit.entity.Player.kick(net.kyori.adventure.text.Component,org.bukkit.event.player.PlayerKickEvent$Cause)
