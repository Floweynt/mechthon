from abc import abstractmethod
from typing import Any, Callable, Protocol
from mechs.types import Message
from mechs.entity import Entity

class ScriptInstance(Protocol):
    @abstractmethod
    def registerMain(self, cb: Callable[[Entity], Any]): ...

    @abstractmethod
    def registerTicker(self, interval: int, cb: Callable[[Entity], Any]): ...

    @abstractmethod
    def registerTriggerable(self, name: str, cb: Callable[[Entity], Any]): ...

class APIAccess(Protocol):
    @abstractmethod
    def plugin(self): ...

    @abstractmethod
    def entityGetScore(self, entity, name: str) -> int: ...
 
    @abstractmethod
    def entitySetScore(self, entity, name: str, value: int) -> None: ...
    
    @abstractmethod
    def entityScoreExists(self, name: str) -> bool: ...
    
    @abstractmethod
    def entityInvoke(self, entity, name: str) -> Any: ...

    @abstractmethod
    def entityTrigger(self, entity, scriptName: str, triggerName: str) -> Any: ...

    @abstractmethod
    def componentFromMini(self, mini: str) -> Message: ...

    def componentToRaw(self, componentBukkit) -> str: ...

def current_script_instance() -> ScriptInstance: ...
def get_api() -> APIAccess: ...
